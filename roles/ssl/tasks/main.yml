---
- name: Ensure OpenSSL is installed
  ansible.builtin.package:
    name: openssl
    state: latest
  tags:
    - ssl-certs
    - packages

- name: Ensure ssl folder exist
  ansible.builtin.file:
    path: "{{ ssl_certs_path }}"
    state: directory
    owner: "{{ ssl_certs_path_owner }}"
    group: "{{ ssl_certs_path_group }}"
    mode: "{{ ssl_certs_mode }}"
  tags:
    - ssl-certs
    - packages

- name: check for ssl privkey
  ansible.builtin.stat:
    path: "{{ ssl_certs_local_privkey_path }}"
  delegate_to: localhost
  register: stat_privkey
  become: no
  tags:
    - ssl-certs
    - packages

- name: check for ssl certs
  ansible.builtin.stat:
    path: "{{ ssl_certs_local_cert_path }}"
  register: stat_cert
  become: no
  tags:
    - ssl-certs
    - packages

- name: Test if privkey file is needed
  ansible.builtin.fail:
    msg: "Privkey file {{ ssl_certs_local_privkey_path }} is missing"
  when: not stat_privkey.stat.exists and stat_cert.stat.exists
  tags:
    - ssl-certs
    - packages

- name: Test if cert file is needed
  ansible.builtin.fail:
    msg: "Cert file {{ ssl_certs_local_cert_path }} is missing"
  when: stat_privkey.stat.exists and not stat_cert.stat.exists
  tags:
    - ssl-certs
    - packages

- ansible.builtin.include: generate.yml
  when: >
    ( not stat_privkey.stat.exists and not stat_cert.stat.exists )
    and ( ssl_certs_local_privkey_data == '' and ssl_certs_local_cert_data == '' )
  tags:
    - ssl-certs
    - packages

- name: Copy SSL private key file (if exists)
  ansible.builtin.copy:
    src: "{{ ssl_certs_local_privkey_path }}"
    dest: "{{ ssl_certs_privkey_path }}"
    owner: "{{ ssl_certs_path_owner }}"
    group: "{{ ssl_certs_path_group }}"
    mode: "{{ ssl_certs_mode }}"
    force: "{{ ssl_certs_force_replace }}"
  when: >
    ( stat_privkey.stat.exists )
    and ( ssl_certs_local_privkey_data == '' )
  tags:
    - ssl-certs
    - packages

- name: Copy SSL certificate file (if exists)
  ansible.builtin.copy:
    src: "{{ ssl_certs_local_cert_path }}"
    dest: "{{ ssl_certs_cert_path }}"
    owner: "{{ ssl_certs_path_owner }}"
    group: "{{ ssl_certs_path_group }}"
    mode: "{{ ssl_certs_mode }}"
    force: "{{ ssl_certs_force_replace }}"
  when: >
    ( stat_cert.stat.exists )
    and ( ssl_certs_local_cert_data == '' )
  tags:
    - ssl-certs
    - packages

- name: Copy SSL certificate data
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ item.dest }}"
    owner: "{{ ssl_certs_path_owner }}"
    group: "{{ ssl_certs_path_group }}"
    mode: "{{ ssl_certs_mode }}"
    force: "{{ ssl_certs_force_replace }}"
  when: item.content != ''
  with_items:
    - { content: "{{ ssl_certs_local_cert_data|default }}", dest: "{{ ssl_certs_cert_path }}" }
    - { content: "{{ ssl_certs_local_privkey_data|default }}", dest: "{{ ssl_certs_privkey_path }}" }
  no_log: true
  tags:
    - ssl-certs
    - packages

- name: Generate strong DHE parameter
  ansible.builtin.command: "openssl dhparam -out {{ssl_certs_dhparam_path}} {{ssl_certs_dhparam_size}} creates={{ssl_certs_dhparam_path}}"
  when: ssl_certs_generate_dh_param
  tags:
    - ssl-certs
    - packages

- name: set kibana ssl certs
  ansible.builtin.lineinfile:
    dest: /etc/kibana/kibana.yml
    regexp: '#server.ssl.key'
    insertafter: "#server.ssl.key"
    line: |
      server.ssl.enabled: true
      server.ssl.certificate: {{ssl_certs_path}}/certs/{{ssl_certs_common_name}}.pem
      server.ssl.key: {{ssl_certs_path}}/private/{{ssl_certs_common_name}}.key

- name: restart kibana
  ansible.builtin.service:
    name: kibana
    state: restarted
...
